@page "/personal/dashboard"
@page "/"
@page "/pages/authentication/login"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IHttpClientFactory ClientFactory
@using Models;

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
<MudGrid>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Portfolio Amount</MudText>
                <MudText Typo="Typo.h5">@PortfolioAmount.ToString("C2")</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.PriceChange" Color="Color.Secondary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Current Exchange Rate</MudText>
                <MudText Typo="Typo.h5">$43,804.01</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Material.Filled.SentimentNeutral" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Market Sentiment</MudText>
                @*<MudText Typo="Typo.h5"><MudIcon Icon="@Icons.Material.Filled.SentimentNeutral" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon></MudText>*@
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
            <MudIcon Icon="@Icons.Filled.Calculate" Color="Color.Warning" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
            <div>
                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Rate Of Return</MudText>
                <MudText Typo="Typo.h5">17%</MudText>
            </div>
        </MudPaper>
    </MudItem>
    <!--<MudItem xs="12">-->
        @*took out "sm="8" -> K Dietz*@
        <!--<MudPaper Class="pa-4" Style="height:350px;">
            <div>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="200px"></MudChart>
                <MudButtonGroup Class="d-flex align-center justify-center" Color="Color.Primary" Variant="Variant.Filled" DisableElevation="true">
                    <MudButton>12 mos.</MudButton>
                    <MudButton>YTD</MudButton>
                    <MudButton>3 Yr.</MudButton>
                </MudButtonGroup>
            </div>
        </MudPaper>
    </MudItem>-->
    @*Commenting out as we may not use this one -> K Dietz*@
    @*<MudItem xs="12" sm="4">
        <MudPaper Class="pa-4" Style="height:350px;">
        <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="100%" Height="200px"></MudChart>
        </MudPaper>
        </MudItem>*@
    <MudItem xs="12" sm="12" md="6">
        <MudCard Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Monthly Balances</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudSimpleTable Elevation="0" Hover="true">
                    <thead>
                        <tr>
                            <th>Month</th>
                            <th>End Balance</th>
                            <th>Differential</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var report in earningReports.OrderBy(x => x.EarningReportDate))
                        {
                            <tr>
                                <td>
                                    <div class="d-flex flex-row">
                                        <div class="ml-6">
                                            <MudText Typo="Typo.subtitle2">@report.EarningReportDate.ToString("yyyy MMM")</MudText>
                                        </div>
                                    </div>
                                </td>
                                <td><MudChip Label="true" Color="Color.Success" Size="Size.Small" Class="ml-auto mud-elevation-25">@report.MonthlyStartingBalance.ToString("C2")</MudChip></td>
                                <td><MudText Color="@(report.MonthlyDifference <= 0 ? Color.Error : Color.Success)">@report.MonthlyDifference.ToString("C2")</MudText></td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="6">
        <MudCard Style="height:100%;">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">In The News...</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="px-0">
                <MudList Clickable="true">
                    @if (articleResp is null)
                    {
                        <h1>Loading...</h1>
                    }
                    else
                    {
                        @foreach (var item in this.articleResp.articles)
                        {
                            <MudListItem>
                                <div class="d-flex flex-row">
                                    <MudAvatar Class="mud-elevation-25" Image=@item.urlToImage Rounded="true">
                                        <MudIcon Icon="@Icons.Filled.NewReleases" Class="mx-4" />
                                    </MudAvatar>
                                    <div class="ml-6">
                                        <MudLink Target="blank" Href=@item.url>@item.description</MudLink>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="36" sm="36" md="6"></MudItem>
</MudGrid>

Visit our
<MudElement HtmlTag="a"
            Class="ma-0"
            Style="color:maroon;font-weight:bold;"
            href="https://github.com/MudBlazor/MudBlazor"
            target="blank"
            rel="noopener noreferrer">
    Twitter!
</MudElement>





@code {

    decimal PortfolioAmount = 0.0m;
    public ArticleList articleResp { get; set; }

    EarningReport[] earningReports = new EarningReport[]
{
            new EarningReport { EarningReportDate = new DateTime(2021, 12, 1), MonthlyStartingBalance = 39117.35m, MonthlyDifference = 2891.83m},
            new EarningReport { EarningReportDate = new DateTime(2022, 1, 1), MonthlyStartingBalance = 39000.00m, MonthlyDifference = -117.35m},
            new EarningReport { EarningReportDate = new DateTime(2022, 2, 1), MonthlyStartingBalance = 43366.83m, MonthlyDifference = 4366.83m},

             };

    class EarningReport
    {
        public DateTime EarningReportDate;
        public decimal MonthlyStartingBalance;
        public decimal MonthlyDifference;
    }

    //Kevin Dietz Changes.  Creating dummy objects to populate the chart
    //private int Index = -1;

    public List<ChartSeries> Series = new List<ChartSeries>()
{
        new ChartSeries() {Name = "Personal Account", Data = new double[] {33933.16, 32100.01, 34113.23, 34300.84, 34800.19, 34400.88, 36117.44, 37918.45, 38504.30, 39117.35, 42009.18, 43366.83}},
        new ChartSeries() {Name = "Market Trend", Data = new double[] {31933.16, 33100.01, 33113.23, 32300.84, 35800.19, 31400.88, 33117.44, 31918.45, 34504.30, 39117.35, 40009.18, 37366.83}}
    };

    //K Dietz creating Index label for chart
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

    //K Dietz creating Pie chart data

    double[] data = { 65, 15, 12, 8 };
    string[] labels = { "Stock Market", "Bonds", "Crypto Trading", "Other" };  //Just creates Lables

    //K Dietz code for mock up data for Monthly balances

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;
        var _httpClient = new HttpClient();
        Dictionary<string, object> userData = null;

        //Kevin Dietz adding in api retrieval to populate News Links

        var _httpClient2 = new HttpClient();
        _httpClient2.BaseAddress = new Uri("https://newsapi.org/v2/everything?q=bitcoin&sortBy=publishedAt&pageSize=5&apiKey=97857a96022042c892c7c33fc8e37f23");
        articleResp = await _httpClient2.GetFromJsonAsync<ArticleList>("");


        var emailClaim = user.Claims.Where(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress").SingleOrDefault();

        if (emailClaim != null)
        {
            var email = emailClaim.Value;
            string uriString = $"https://localhost:5001/user/{email}/data";
            _httpClient.BaseAddress = new Uri(uriString);
            try
            {
                userData = await _httpClient.GetFromJsonAsync<Dictionary<string, object>>("");
            }
            catch
            {
            }
        }

        if (userData != null)
        {
            if (userData.ContainsKey("PortfolioAmount"))
            {
                decimal.TryParse(userData["PortfolioAmount"].ToString(), out PortfolioAmount);
            }
        }

    }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
    new BreadcrumbItem("Home", href: "personal/dashboard"),
};

}